import { DateTimeFormatOptions, DateTimeFormatLocaleInternalData, UnpackedZoneData } from '@formatjs/ecma402-abstract';
import { PackedData, RawDateTimeLocaleData } from './types';
export interface IntlDateTimeFormatInternal {
    locale: string;
    dataLocale: string;
    calendar?: string;
    dateStyle?: 'full' | 'long' | 'medium' | 'short';
    timeStyle?: 'full' | 'long' | 'medium' | 'short';
    weekday: 'narrow' | 'short' | 'long';
    era: 'narrow' | 'short' | 'long';
    year: '2-digit' | 'numeric';
    month: '2-digit' | 'numeric' | 'narrow' | 'short' | 'long';
    day: '2-digit' | 'numeric';
    hour: '2-digit' | 'numeric';
    minute: '2-digit' | 'numeric';
    second: '2-digit' | 'numeric';
    timeZoneName: 'short' | 'long';
    hourCycle: string;
    numberingSystem: string;
    timeZone: string;
    pattern: string;
    boundFormat?: Intl.DateTimeFormat['format'];
}
export interface DateTimeFormatConstructor {
    new (locales?: string | string[], options?: DateTimeFormatOptions): Intl.DateTimeFormat;
    (locales?: string | string[], options?: DateTimeFormatOptions): Intl.DateTimeFormat;
    __addLocaleData(...data: RawDateTimeLocaleData[]): void;
    supportedLocalesOf(locales: string | string[], options?: Pick<DateTimeFormatOptions, 'localeMatcher'>): string[];
    getDefaultLocale(): string;
    relevantExtensionKeys: string[];
    __defaultLocale: string;
    __defaultTimeZone: string;
    __setDefaultTimeZone(tz: string): void;
    getDefaultTimeZone(): string;
    localeData: Record<string, DateTimeFormatLocaleInternalData>;
    availableLocales: string[];
    polyfilled: boolean;
    tzData: Record<string, UnpackedZoneData[]>;
    __addTZData(d: PackedData): void;
}
export declare const DateTimeFormat: DateTimeFormatConstructor;
//# sourceMappingURL=core.d.ts.map